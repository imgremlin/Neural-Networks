import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import pandas as pd

np.random.seed(4)

nb_patterns = 14
pattern_width = 5
pattern_height = 5
max_iterations = 10

I = np.array([[1, -1, -1, -1, 1,
     1, 1, -1, -1, 1,
     1, -1, 1, -1, 1,
     1, -1, -1, 1, 1,
     1, -1, -1, -1, 1], #N
     
     [1, 1, 1, 1, -1,
     1, -1, -1, -1, -1,
     1, 1, 1, 1, -1,
     1, -1, -1, -1, -1,
     1, 1, 1, 1, -1],  #E
     
     [1, -1, -1, -1, 1,
     1, -1, -1, -1, 1,
     1, -1, -1, -1, 1,
     1, -1, -1, 1, 1,
     1, 1, 1, -1, 1],  #U
     
     [1, 1, 1, 1, -1,
     1, -1, -1, 1, -1,
     1, -1, -1, 1, -1,
     1, 1, 1, 1, -1,
     1, -1, -1, -1, 1],  #R
     
     [-1, -1, 1, -1, -1, 
     -1, 1, -1, 1, -1,
     1, -1, -1, -1, 1,
     1, 1, 1, 1, 1,
     1, -1, -1, -1, 1], #A
     
     [1, -1, -1, -1, -1, 
     1, -1, -1, -1, -1,
     1, -1, -1, -1, -1,
     1, -1, -1, -1, -1,
     1, 1, 1, 1, -1], #L
    
    [-1, -1, -1, -1, -1,
     -1, -1, -1, -1, -1,
     -1, -1, -1, -1, -1,
     -1, -1, -1, -1, -1,
     -1, -1, -1, -1, -1],  #space
    
    [1, -1, -1, -1, 1,
     1, 1, -1, -1, 1,
     1, -1, 1, -1, 1,
     1, -1, -1, 1, 1,
     1, -1, -1, -1, 1], #N
    
    [1, 1, 1, 1, -1,
     1, -1, -1, -1, -1,
     1, 1, 1, 1, -1,
     1, -1, -1, -1, -1,
     1, 1, 1, 1, -1],  #E

     [1, 1, 1, 1, 1,
     -1, -1, 1, -1, -1,
     -1,- 1, 1, -1, -1,
     -1, -1, 1, -1, -1,
     -1, -1, 1, -1, -1],  #T
     
     [1, -1, -1, -1, 1,
     1, -1, -1, -1, 1,
     1, -1, 1, -1, 1,
     1, -1, 1, -1, 1,
     -1, 1, -1, 1, -1],  #W
     
     [-1, 1, 1, 1, -1,
     1, -1, -1, -1, 1,
     1, -1, -1, -1, 1,
     1, -1, -1, -1, 1,
     -1, 1, 1, 1, -1],  #O
     
     [1, 1, 1, 1, -1,
     1, -1, -1, 1, -1,
     1, -1, -1, 1, -1,
     1, 1, 1, 1, -1,
     1, -1, -1, -1, 1],  #R
     
     [1, -1, -1, -1, 1,
     1, -1, -1, 1, -1,
     1, 1, 1, -1, -1,
     1, -1, -1, 1, -1,
     1, -1, -1, -1, 1]  #K
     ])


I2 = np.array([[1, -1, -1, -1, 1,
     1, 1, 1, -1, 1,
     1, -1, -1, -1, 1,
     1, -1, -1, 1, 1,
     1, -1, -1, -1, 1], #N
     
     [1, 1, -1, 1, -1,
     1, 1, -1, -1, -1,
     1, 1, 1, 1, -1,
     1, -1, -1, -1, -1,
     1, 1, 1, 1, -1],  #E
     
     [1, -1, -1, -1, 1,
     1, -1, -1, -1, -1,
     1, -1, -1, -1, 1,
     1, -1, -1, -1, 1,
     1, 1, 1, -1, 1],  #U
     
     [1, 1, 1, -1, -1,
     1, -1, -1, 1, -1,
     1, -1, 1, 1, -1,
     1, 1, 1, 1, -1,
     1, -1, -1, -1, 1],  #R
     
     [-1, -1, 1, -1, -1, 
     -1, 1, -1, 1, -1,
     1, -1, -1, -1, 1,
     1, 1, 1, 1, -1,
     1, -1, -1, 1, 1], #A
     
     [1, -1, -1, -1, -1, 
     1, -1, -1, -1, -1,
     1, -1, -1, -1, -1,
     1, -1, 1, -1, -1,
     1, 1, -1, 1, -1], #L
    
    [-1, -1, -1, -1, -1,
     -1, -1, -1, 1, -1,
     -1, -1, -1, -1, -1,
     -1, -1, 1, -1, -1,
     -1, -1, -1, -1, -1],  #space
    
    [1, -1, -1, -1, 1,
     1, 1, -1, 1, 1,
     1, -1, 1, -1, 1,
     1, -1, -1, -1, 1,
     1, -1, -1, -1, 1], #N
    
    [1, 1, 1, 1, -1,
     1, -1, -1, -1, -1,
     1, 1, -1, 1, -1,
     1, 1, -1, -1, -1,
     1, 1, 1, 1, -1],  #E

     [1, 1, 1, 1, -1,
     -1, -1, 1, -1, -1,
     -1,- 1, 1, 1, -1,
     -1, -1, 1, -1, -1,
     -1, -1, 1, -1, -1],  #T
     
     [1, -1, -1, -1, 1,
     1, -1, -1, 1, 1,
     1, -1, 1, -1, -1,
     1, -1, 1, -1, 1,
     -1, 1, -1, 1, -1],  #W
     
     [-1, 1, 1, 1, -1,
     1, -1, -1, 1, 1,
     1, -1, -1, -1, -1,
     1, -1, -1, -1, 1,
     -1, 1, 1, 1, -1],  #O
     
     [1, 1, 1, 1, -1,
     1, -1, -1, 1, -1,
     1, -1, -1, -1, -1,
     1, 1, 1, 1, 1,
     1, -1, -1, -1, 1],  #R
     
     [-1, -1, -1, -1, 1,
     1, -1, 1, 1, -1,
     1, 1, 1, -1, -1,
     1, -1, -1, 1, -1,
     1, -1, -1, -1, 1]  #K
     ])

I4 = np.array([[1, -1, -1, -1, -1,
     1, -1, -1, -1, 1,
     1, -1, 1, -1, -1,
     -1, -1, -1, 1, 1,
     1, -1, -1, -1, 1], #N
     
     [1, 1, 1, 1, -1,
     -1, -1, -1, -1, -1,
     1, 1, 1, 1, -1,
     -1, -1, -1, -1, -1,
     -1, 1, -1, 1, -1],  #E
     
     [-1, -1, -1, -1, -1,
     1, -1, -1, -1, 1,
     1, -1, -1, -1, -1,
     1, -1, -1, -1, 1,
     1, 1, 1, -1, 1],  #U
     
     [1, 1, 1, 1, -1,
     -1, -1, -1, 1, -1,
     1, -1, -1, 1, -1,
     -1, 1, -1, -1, -1,
     1, -1, -1, -1, 1],  #R
     
     [-1, -1, 1, -1, -1, 
     -1, -1, -1, -1, -1,
     1, -1, -1, -1, 1,
     -1, 1, 1, 1, 1,
     -1, -1, -1, -1, 1], #A
     
     [1, -1, -1, -1, -1, 
     -1, -1, -1, -1, -1,
     1, -1, -1, -1, -1,
     -1, -1, -1, -1, -1,
     -1, 1, 1, -1, -1], #L
    
    [-1, -1, -1, -1, -1,
     -1, 1, -1, 1, -1,
     -1, -1, 1, -1, -1,
     -1, -1, 1, -1, -1,
     -1, -1, -1, -1, -1],  #space
    
    [1, -1, -1, -1, 1,
     -1, 1, -1, -1, 1,
     -1, -1, -1, -1, 1,
     1, -1, -1, 1, 1,
     -1, -1, -1, -1, 1], #N
    
    [-1, 1, 1, -1, -1,
     -1, -1, -1, -1, -1,
     1, 1, 1, -1, -1,
     1, -1, -1, -1, -1,
     1, 1, 1, 1, -1],  #E

     [1, -1, 1, 1, 1,
     -1, -1, -1, -1, -1,
     -1,- 1, -1, -1, -1,
     -1, -1, 1, -1, -1,
     -1, -1, -1, -1, -1],  #T
     
     [1, -1, -1, -1, 1,
     -1, -1, -1, -1, 1,
     1, -1, 1, -1, -1,
     -1, -1, 1, -1, 1,
     -1, 1, -1, -1, -1],  #W
     
     [-1, 1, -1, -1, -1,
     1, -1, -1, -1, 1,
     1, -1, -1, -1,-1,
     1, -1, -1, -1, 1,
     -1, 1, 1, -1, -1],  #O
     
     [-1, 1, -1, 1, -1,
     1, -1, -1, 1, -1,
     1, -1, -1, -1, -1,
     1, 1, 1, 1, -1,
     -1, -1, -1, -1, 1],  #R
     
     [1, -1, -1, -1, 1,
     1, -1, -1, 1, -1,
     -1, 1, -1, -1, -1,
     1, -1, -1, -1, -1,
     -1, -1, -1, -1, 1]  #K
     ])

I6 = np.array([[1, -1, -1, -1, -1,
     1, -1, -1, 1, 1,
     1, -1, 1, -1, -1,
     -1, -1, -1, 1, 1,
     1, -1, -1, 1, 1], #N
     
     [1, 1, 1, 1, -1,
     -1, -1, -1, 1, -1,
     1, 1, 1, 1, -1,
     -1, -1, -1, 1, -1,
     -1, 1, -1, 1, -1],  #E
     
     [-1, -1, -1, -1, -1,
     1, -1, -1, 1, 1,
     1, -1, -1, -1, -1,
     1, -1, -1, -1, 1,
     1, 1, 1, 1, 1],  #U
     
     [1, 1, 1, 1, 1,
     -1, -1, -1, 1, 1,
     1, -1, -1, 1, -1,
     -1, 1, -1, -1, -1,
     1, -1, -1, -1, 1],  #R
     
     [-1, -1, 1, 1, -1, 
     -1, -1, -1, -1, 1,
     1, -1, -1, -1, 1,
     -1, 1, 1, 1, 1,
     -1, -1, -1, -1, 1], #A
     
     [1, -1, -1, -1, -1, 
     -1, -1, -1, -1, -1,
     1, -1, -1, -1, 1,
     -1, -1, -1, -1, -1,
     -1, 1, 1, 1, -1], #L
    
    [1, -1, -1, -1, -1,
     -1, 1, -1, 1, -1,
     -1, -1, 1, -1, -1,
     -1, -1, 1, 1, -1,
     -1, -1, -1, -1, -1],  #space
    
    [1, -1, -1, 1, 1,
     -1, 1, -1, -1, 1,
     -1, -1, 1, -1, 1,
     1, -1, -1, 1, 1,
     -1, -1, -1, -1, 1], #N
    
    [-1, 1, 1, -1, -1,
     -1, 1, -1, -1, -1,
     1, 1, 1, -1, -1,
     1, 1, -1, -1, -1,
     1, 1, 1, 1, -1],  #E

     [1, 1, 1, 1, 1,
     -1, -1, -1, -1, -1,
     -1,- 1, -1, -1, -1,
     -1, 1, 1, -1, -1,
     -1, -1, -1, -1, -1],  #T
     
     [1, -1, -1, -1, 1,
     -1, -1, -1, -1, 1,
     1, 1, 1, -1, 1,
     -1, -1, 1, -1, 1,
     -1, 1, -1, -1, -1],  #W
     
     [-1, 1, -1, 1, -1,
     1, -1, -1, -1, 1,
     1, -1, -1, -1,-1,
     1, -1, -1, -1, 1,
     -1, 1, 1, -1, 1],  #O
     
     [-1, 1, -1, 1, 1,
     1, -1, -1, 1, -1,
     1, -1, 1, -1, -1,
     1, 1, 1, 1, -1,
     -1, -1, -1, -1, 1],  #R
     
     [1, -1, -1, -1, 1,
     1, -1, -1, 1, -1,
     -1, 1, -1, -1, -1,
     1, -1, -1, 1, -1,
     -1, -1, 1, -1, 1]  #K
     ])

f, ax=plt.subplots(1,len(I), figsize = (14,1))
for ii in range(len(I)):
    sns.heatmap(np.reshape(I[ii],(5,5)), cmap = sns.light_palette("purple"), ax=ax[ii],
                   cbar=False, yticklabels=False, xticklabels=False )

f2, ax=plt.subplots(1,len(I), figsize = (14,1))
for ii in range(len(I)):
    sns.heatmap(np.reshape(I2[ii],(5,5)), cmap = sns.light_palette("navy"), ax=ax[ii],
                   cbar=False, yticklabels=False, xticklabels=False )

f4, ax=plt.subplots(1,len(I), figsize = (14,1))
for ii in range(len(I)):
    sns.heatmap(np.reshape(I4[ii],(5,5)), cmap = sns.light_palette("seagreen"), ax=ax[ii],
                   cbar=False, yticklabels=False, xticklabels=False )

f6, ax=plt.subplots(1,len(I), figsize = (14,1))
for ii in range(len(I)):
    sns.heatmap(np.reshape(I6[ii],(5,5)), cmap = sns.light_palette("orange"), ax=ax[ii],
                   cbar=False, yticklabels=False, xticklabels=False )  
    
plt.show()

W = np.zeros((pattern_width * pattern_height, pattern_width * pattern_height))

for i in range(pattern_width * pattern_height):
    for j in range(pattern_width * pattern_height):
        if i == j or W[i, j] != 0.0:
            continue
            
        w = 0.0
        
        for n in range(nb_patterns):
            w += I[n, i] * I[n, j]

        W[i, j] = w / I.shape[0]
        W[j, i] = W[i, j]
        
er2 = []
er4 = []
er6 = []

for ii in range(len(I)):
    
    x_test = I2[ii]
    A = x_test.copy()
    
    for _ in range(max_iterations):
        for i in range(pattern_width * pattern_height):
            A[i] = 1.0 if np.dot(W[i], A) > 0 else -1.0
            
    truth_list = (A==I[ii])
    
    if (False in truth_list):
        er2.append(1)
    else:
        er2.append(0)

for ii in range(len(I)):
    
    x_test = I4[ii]
    A = x_test.copy()
    
    for _ in range(max_iterations):
        for i in range(pattern_width * pattern_height):
            A[i] = 1.0 if np.dot(W[i], A) > 0 else -1.0
            
    truth_list = (A==I[ii])
    
    if (False in truth_list):
        er4.append(1)
    else:
        er4.append(0)
        
for ii in range(len(I)):
    
    x_test = I6[ii]
    A = x_test.copy()
    
    for _ in range(max_iterations):
        for i in range(pattern_width * pattern_height):
            A[i] = 1.0 if np.dot(W[i], A) > 0 else -1.0
            
    truth_list = (A==I[ii])
    
    if (False in truth_list):
        er6.append(1)
    else:
        er6.append(0)
        
words = ['N','E', 'U', 'R', 'A', 'L', ' ', 'N', 'E', 'T', 'W', 'O', 'R', 'K']    
       
df = pd.DataFrame(list(zip(er2, er4, er6)),
                  columns =['2 changes', '4 changes', '6 changes'],
                      index = words)

for col in df.columns:
    df[col] = df[col].map({1: True, 0: False})
    
print('\n',df)       

print(f'\n2 changes: {er2.count(1)} - correct | {er2.count(0)} - false | accuracy is {er2.count(1)/14:.3f}') 
print(f'4 changes: {er4.count(1)} - correct | {er4.count(0)} - false | accuracy is {er4.count(1)/14:.3f}')
print(f'6 changes: {er6.count(1)} - correct | {er6.count(0)} - false | accuracy is {er6.count(1)/14:.3f}')
